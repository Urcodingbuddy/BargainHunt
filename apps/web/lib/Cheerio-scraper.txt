import axios from 'axios';
import { load } from 'cheerio';

async function scrapeAmazon(searchParams: string): Promise<any[]> {
    const amazonUrl = `https://www.amazon.in/s?k=${encodeURIComponent(searchParams.trim().replace(/\s+/g, '+'))}`;
    const headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) ' +
            'AppleWebKit/537.36 (KHTML, like Gecko) ' +
            'Chrome/110.0.0.0 Safari/537.36'
    };

    const response = await axios.get(amazonUrl, { headers });
    const $ = load(response.data);

    const productSelector = ".s-card-container";
    if ($(productSelector).length === 0) {
        throw new Error("Amazon products not found");
    }

    const amazonData = $(productSelector)
        .map((i, el) => {
            return {
                name: $(el).find(".a-size-medium.a-spacing-none.a-color-base.a-text-normal").text().trim() || "N/A",
                rating: $(el).find(".a-icon-star-small").text().trim() || "N/A",
                reviews: $(el).find(".a-size-base.s-underline-text").text().trim() || "N/A",
                boughtInPastMonth: $(el).find(".a-row.a-size-base .a-size-base.a-color-secondary").text().trim() || "N/A",
                price: $(el).find(".a-price-whole").text().trim() || "Out of Stock",
                originalPrice: $(el).find(".a-offscreen").text().trim() || "N/A",
                discount: $(el).find(".a-size-base.a-color-price").text().trim() || "",
                availability: $(el).find(".a-size-medium.a-color-success").text().trim() || "In Stock",
                image: $(el).find(".s-image").attr("src") || "",
                link: $(el).find("a").attr("href")
                    ? `https://www.amazon.in${$(el).find("a").attr("href")}`
                    : ""
            };
        }).get().slice(1);
    return amazonData;
}

async function scrapeFlipkart(searchParams: string): Promise<any[]> {
    const flipkartUrl = `https://www.flipkart.com/search?q=${encodeURIComponent(searchParams.trim().replace(/\s+/g, '+'))}`;
    const headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) ' +
            'AppleWebKit/537.36 (KHTML, like Gecko) ' +
            'Chrome/110.0.0.0 Safari/537.36',
        'Accept-Language': 'en-US,en;q=0.9',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8',
        'Referer': 'https://www.flipkart.com/'
    };

    try {
        const response = await axios.get(flipkartUrl, { headers });
        const $ = load(response.data);
        const productSelector = "._75nlfW";
        if ($(productSelector).length === 0) {
          throw new Error("Flipkart products not found");
        }
        const flipkartData = $(productSelector)
          .map((i, el) => {
            const nameText = ($(el).find(".KzDlHZ").text().trim() || "").concat("|");
            const detailsText = $(el).find(".J+igdf").text().trim() || "";
            return {
              name: nameText + detailsText || "N/A",
              price: $(el).find(".Nx9bqj._4b5DiR").text().trim() || "N/A",
              orignalPrice: $(el).find(".yRaY8j.ZYYwLA").text().trim() || "N/A",
              image: $(el).find(".DByuf4").attr("src") || "",
              link: $(el).find("a").attr("href")
                ? `https://www.flipkart.com${$(el).find("a").attr("href")}`
                : ""
            };
          })
          .get()
          .slice(1);
        return flipkartData;
      } catch (error: any) {
        console.error("Flipkart scraping error:", error);
        throw new Error(`Failed to scrape Flipkart: ${error.message}`);
      }    
}

export async function scrapeProduct(searchParams: string): Promise<{ amazon: any[]; flipkart: any[] }> {
    try {
        const [amazonData, flipkartData] = await Promise.all([
            scrapeAmazon(searchParams),
            scrapeFlipkart(searchParams)
        ]);
        return { amazon: amazonData, flipkart: flipkartData };
    } catch (error: any) {
        console.error("Scraping error:", error);
        throw new Error(`Failed to scrape product: ${error.message}`);
    }
}
